# turns the #123b84 color codes to 203;133;54 rgb codes
hex_color_to_rgb() {
  hex=${1#"#"}

  r=$((0x${hex:0:2}))
  g=$((0x${hex:2:2}))
  b=$((0x${hex:4:2}))

  printf "%d;%d;%d\n" "$r" "$g" "$b"
}

# Inserts a "255;255;255" formatted code inside ansi color code
rgb_fg_ps1() {
  printf "\[\033[38;2;$(hex_color_to_rgb "$1")m\]"
}

rgb_bg_ps1() {
  printf "\[\033[48;2;$(hex_color_to_rgb "$1")m\]"
}

no_color_ps1() {
  printf "\[\033[0m\]"
}

gitbranch() {
  branch_id=$(git branch 2>/dev/null | grep '^*' | cut -c 2-)
  if [ $branch_id ]
  then
    printf $branch_id
  fi
}

function current_user() {
  if [ -n "$USER" ]; then
    printf "$USER"
  else
    printf "$USERNAME"
  fi
}

short_time() {
  TMP_TIME=$(date "+%T")
	printf "$TMP_TIME"
}

orange="#f2a400"
gray="#787878"
red="#ff0000"

prompt_cmd() {
  # Show status code
  case $? in 
    0) prompt_code="" ;;
    *) prompt_code="($?)" ;;
  esac

  # Show git branch, and color it based on status
  git_branch="$(gitbranch)"
  if [[ "$git_branch" ]]; then
    if [[ $(git status --porcelain) ]]; then
      git_branch_color=$(rgb_fg_ps1 $red)
    else
      git_branch_color=$(rgb_fg_ps1 $orange)
    fi
  fi

  LINE_1="\
$(rgb_bg_ps1 $orange)  $(no_color_ps1) \
$(rgb_fg_ps1 $orange)$(current_user)\
$(rgb_fg_ps1 $gray)@\
$(rgb_fg_ps1 $orange)$HOSTNAME\
$(rgb_fg_ps1 $gray):${PWD/#$HOME/'~'} \
$git_branch_color$git_branch"
  LINE_2="$(rgb_bg_ps1 $orange)  $(no_color_ps1) \
$(rgb_fg_ps1 $red)$(short_time) \
⚙️$prompt_code$(no_color_ps1)> "

  PS1="\r\n${LINE_1}\r\n${LINE_2}"
}

export PROMPT_COMMAND='prompt_cmd'
